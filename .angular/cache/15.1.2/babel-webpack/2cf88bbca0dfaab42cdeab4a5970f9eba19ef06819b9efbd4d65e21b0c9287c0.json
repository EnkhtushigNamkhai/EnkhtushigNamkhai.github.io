{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Optional, SkipSelf, Directive, Input, HostBinding, ElementRef, Component, ViewChild } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"svgElement\"];\nfunction IconComponent__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"svg\", 2, 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.innerHtml, i0.ɵɵsanitizeHtml)(\"ngClass\", ctx_r0.computedClasses)(\"cHtmlAttr\", ctx_r0.attributes);\n    i0.ɵɵattribute(\"width\", ctx_r0.width)(\"height\", ctx_r0.height || ctx_r0.width)(\"viewBox\", ctx_r0.viewBox);\n  }\n}\nfunction IconComponent__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 4);\n    i0.ɵɵelement(1, \"use\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.computedClasses)(\"cHtmlAttr\", ctx_r1.attributes);\n    i0.ɵɵattribute(\"width\", ctx_r1.width)(\"height\", ctx_r1.height || ctx_r1.width);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r1.use);\n  }\n}\nlet IconSetService = /*#__PURE__*/(() => {\n  class IconSetService {\n    constructor() {\n      this._iconNames = {};\n      this._icons = {};\n    }\n    get iconNames() {\n      return this._iconNames;\n    }\n    get icons() {\n      return this._icons;\n    }\n    set icons(iconSet) {\n      for (const iconsKey in iconSet) {\n        this._iconNames[iconsKey] = iconsKey;\n      }\n      this._icons = iconSet;\n    }\n    getIcon(name) {\n      const icon = this.icons[name];\n      if (!icon) {\n        console.warn(`CoreUI WARN: Icon ${name} is not registered in IconService`);\n      }\n      return this.icons[name];\n    }\n  }\n  IconSetService.ɵfac = function IconSetService_Factory(t) {\n    return new (t || IconSetService)();\n  };\n  IconSetService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IconSetService,\n    factory: IconSetService.ɵfac,\n    providedIn: 'root'\n  });\n  return IconSetService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IconSetModule = /*#__PURE__*/(() => {\n  class IconSetModule {\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('CoreUI IconSetModule is already loaded. Import it in the AppModule only');\n      }\n    }\n    static forRoot() {\n      return {\n        ngModule: IconSetModule,\n        providers: [{\n          provide: IconSetService\n        }]\n      };\n    }\n  }\n  IconSetModule.ɵfac = function IconSetModule_Factory(t) {\n    return new (t || IconSetModule)(i0.ɵɵinject(IconSetModule, 12));\n  };\n  IconSetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IconSetModule\n  });\n  IconSetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [IconSetService],\n    imports: [CommonModule]\n  });\n  return IconSetModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IconDirective = /*#__PURE__*/(() => {\n  class IconDirective {\n    constructor(renderer, elementRef, sanitizer, iconSet) {\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.sanitizer = sanitizer;\n      this.iconSet = iconSet;\n      this.size = '';\n      this.xmlns = 'http://www.w3.org/2000/svg';\n      this.pointerEvents = 'none';\n      this.role = 'img';\n    }\n    set name(name) {\n      this._name = name?.includes('-') ? this.toCamelCase(name) : name;\n    }\n    get name() {\n      return this._name;\n    }\n    set viewBox(viewBox) {\n      this._viewBox = viewBox;\n    }\n    get viewBox() {\n      return this._viewBox ?? this.scale;\n    }\n    get hostClasses() {\n      const classes = {\n        icon: true,\n        [`icon-${this.computedSize}`]: !!this.computedSize\n      };\n      return this.customClasses ?? classes;\n    }\n    get innerHtml() {\n      const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code ?? '';\n      // todo proper sanitize\n      // const sanitized = this.sanitizer.sanitize(SecurityContext.HTML, code);\n      return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code ?? '');\n    }\n    get titleCode() {\n      return this.title ? `<title>${this.title}</title>` : '';\n    }\n    get code() {\n      if (this.content) {\n        return this.content;\n      }\n      if (this.iconSet && this.name) {\n        return this.iconSet.getIcon(this.name);\n      }\n      if (this.name && !this.iconSet?.icons[this.name]) console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` + `To use icon by 'name' prop you need to add it to IconSet service. \\n`, this.name);\n      return undefined;\n    }\n    get scale() {\n      return Array.isArray(this.code) && this.code.length > 1 ? `0 0 ${this.code[0]}` : '0 0 64 64';\n    }\n    get computedSize() {\n      const addCustom = !this.size && (this.width || this.height);\n      return this.size === 'custom' || addCustom ? 'custom-size' : this.size;\n    }\n    get computedClasses() {\n      const classes = {\n        icon: true,\n        [`icon-${this.computedSize}`]: !!this.computedSize\n      };\n      return !!this.customClasses ? this.customClasses : classes;\n    }\n    toCamelCase(str) {\n      return str.replace(/([-_][a-z0-9])/ig, $1 => {\n        return $1.toUpperCase().replace('-', '');\n      });\n    }\n  }\n  IconDirective.ɵfac = function IconDirective_Factory(t) {\n    return new (t || IconDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(IconSetService));\n  };\n  IconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: IconDirective,\n    selectors: [[\"svg\", \"cIcon\", \"\"]],\n    hostVars: 7,\n    hostBindings: function IconDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"innerHtml\", ctx.innerHtml, i0.ɵɵsanitizeHtml);\n        i0.ɵɵattribute(\"viewBox\", ctx.viewBox)(\"xmlns\", ctx.xmlns)(\"pointer-events\", ctx.pointerEvents)(\"role\", ctx.role);\n        i0.ɵɵclassMap(ctx.hostClasses);\n      }\n    },\n    inputs: {\n      content: [\"cIcon\", \"content\"],\n      size: \"size\",\n      title: \"title\",\n      customClasses: \"customClasses\",\n      width: \"width\",\n      height: \"height\",\n      name: \"name\",\n      viewBox: \"viewBox\",\n      xmlns: \"xmlns\",\n      pointerEvents: [\"pointer-events\", \"pointerEvents\"],\n      role: \"role\"\n    },\n    exportAs: [\"cIcon\"]\n  });\n  return IconDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HtmlAttributesDirective = /*#__PURE__*/(() => {\n  class HtmlAttributesDirective {\n    constructor(renderer, el) {\n      this.renderer = renderer;\n      this.el = el;\n    }\n    ngOnInit() {\n      const attribs = this.cHtmlAttr;\n      for (const attr in attribs) {\n        if (attr === 'style' && typeof attribs[attr] === 'object') {\n          this.setStyle(attribs[attr]);\n        } else if (attr === 'class') {\n          this.addClass(attribs[attr]);\n        } else {\n          this.setAttrib(attr, attribs[attr]);\n        }\n      }\n    }\n    setStyle(styles) {\n      // tslint:disable-next-line:forin\n      for (const style in styles) {\n        this.renderer.setStyle(this.el.nativeElement, style, styles[style]);\n      }\n    }\n    addClass(classes) {\n      const classArray = Array.isArray(classes) ? classes : classes.split(' ');\n      classArray.filter(element => element.length > 0).forEach(element => {\n        this.renderer.addClass(this.el.nativeElement, element);\n      });\n    }\n    setAttrib(key, value) {\n      value !== null ? this.renderer.setAttribute(this.el.nativeElement, key, value) : this.renderer.removeAttribute(this.el.nativeElement, key);\n    }\n  }\n  HtmlAttributesDirective.ɵfac = function HtmlAttributesDirective_Factory(t) {\n    return new (t || HtmlAttributesDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  HtmlAttributesDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: HtmlAttributesDirective,\n    selectors: [[\"\", \"cHtmlAttr\", \"\"]],\n    inputs: {\n      cHtmlAttr: \"cHtmlAttr\"\n    },\n    exportAs: [\"cHtmlAttr\"]\n  });\n  return HtmlAttributesDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IconComponent = /*#__PURE__*/(() => {\n  class IconComponent {\n    constructor(renderer, elementRef, sanitizer, iconSet) {\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.sanitizer = sanitizer;\n      this.iconSet = iconSet;\n      this.attributes = {\n        role: 'img'\n      };\n      this.size = '';\n      this.use = '';\n      this.customClasses = '';\n      this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');\n    }\n    set name(name) {\n      this._name = name.includes('-') ? this.toCamelCase(name) : name;\n    }\n    get name() {\n      return this._name;\n    }\n    set viewBox(viewBox) {\n      this._viewBox = viewBox;\n    }\n    get viewBox() {\n      return this._viewBox ?? this.scale;\n    }\n    get innerHtml() {\n      const code = Array.isArray(this.code) ? this.code[1] || this.code[0] : this.code ?? '';\n      // todo proper sanitize\n      // const sanitized = this.sanitizer.sanitize(SecurityContext.HTML, code);\n      return this.sanitizer.bypassSecurityTrustHtml(this.titleCode + code ?? '');\n    }\n    ngAfterViewInit() {\n      this.elementRef.nativeElement.classList.forEach(item => {\n        this.renderer.addClass(this.svgElementRef.nativeElement, item);\n      });\n      const parentElement = this.renderer.parentNode(this.elementRef.nativeElement);\n      const svgElement = this.svgElementRef.nativeElement;\n      this.renderer.insertBefore(parentElement, svgElement, this.elementRef.nativeElement);\n      this.renderer.removeChild(parentElement, this.elementRef.nativeElement);\n    }\n    get titleCode() {\n      return this.title ? `<title>${this.title}</title>` : '';\n    }\n    get code() {\n      if (this.content) {\n        return this.content;\n      }\n      if (this.iconSet && this.name) {\n        return this.iconSet.getIcon(this.name);\n      }\n      if (this.name && !this.iconSet?.icons[this.name]) console.warn(`c-icon component: icon name '${this.name}' does not exist for IconSet service. ` + `To use icon by 'name' prop you need to add it to IconSet service. \\n`, this.name);\n      return undefined;\n    }\n    get scale() {\n      return Array.isArray(this.code) && this.code.length > 1 ? `0 0 ${this.code[0]}` : '0 0 64 64';\n    }\n    get computedSize() {\n      const addCustom = !this.size && (this.width || this.height);\n      return this.size === 'custom' || addCustom ? 'custom-size' : this.size;\n    }\n    get computedClasses() {\n      const classes = {\n        icon: true,\n        [`icon-${this.computedSize}`]: !!this.computedSize\n      };\n      return !!this.customClasses ? this.customClasses : classes;\n    }\n    toCamelCase(str) {\n      return str.replace(/([-_][a-z0-9])/ig, $1 => {\n        return $1.toUpperCase().replace('-', '');\n      });\n    }\n  }\n  IconComponent.ɵfac = function IconComponent_Factory(t) {\n    return new (t || IconComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(IconSetService));\n  };\n  IconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: IconComponent,\n    selectors: [[\"c-icon\"]],\n    viewQuery: function IconComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgElementRef = _t.first);\n      }\n    },\n    inputs: {\n      attributes: \"attributes\",\n      content: \"content\",\n      size: \"size\",\n      title: \"title\",\n      use: \"use\",\n      customClasses: \"customClasses\",\n      width: \"width\",\n      height: \"height\",\n      name: \"name\",\n      viewBox: \"viewBox\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"xmlns\", \"http://www.w3.org/2000/svg\", \"role\", \"img\", \"pointer-events\", \"none\", 3, \"innerHtml\", \"ngClass\", \"cHtmlAttr\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"role\", \"img\", \"pointer-events\", \"none\", 3, \"ngClass\", \"cHtmlAttr\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"role\", \"img\", \"pointer-events\", \"none\", 3, \"innerHtml\", \"ngClass\", \"cHtmlAttr\"], [\"svgElement\", \"\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"role\", \"img\", \"pointer-events\", \"none\", 3, \"ngClass\", \"cHtmlAttr\"]],\n    template: function IconComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, IconComponent__svg_svg_0_Template, 2, 6, \"svg\", 0);\n        i0.ɵɵtemplate(1, IconComponent__svg_svg_1_Template, 2, 5, \"svg\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.use && !!ctx.code);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.use);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgIf, HtmlAttributesDirective],\n    styles: [\".icon[_ngcontent-%COMP%]{display:inline-block;color:inherit;text-align:center;vertical-align:-.125rem;fill:currentColor}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size){width:1rem;height:1rem;font-size:1rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-xxl{width:2rem;height:2rem;font-size:2rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-xl{width:1.5rem;height:1.5rem;font-size:1.5rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-lg{width:1.25rem;height:1.25rem;font-size:1.25rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-sm{width:.875rem;height:.875rem;font-size:.875rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-3xl{width:3rem;height:3rem;font-size:3rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-4xl{width:4rem;height:4rem;font-size:4rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-5xl{width:5rem;height:5rem;font-size:5rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-6xl{width:6rem;height:6rem;font-size:6rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-7xl{width:7rem;height:7rem;font-size:7rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-8xl{width:8rem;height:8rem;font-size:8rem}.icon[_ngcontent-%COMP%]:not(.icon-c-s):not(.icon-custom-size).icon-9xl{width:9rem;height:9rem;font-size:9rem}\"]\n  });\n  return IconComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IconModule = /*#__PURE__*/(() => {\n  class IconModule {}\n  IconModule.ɵfac = function IconModule_Factory(t) {\n    return new (t || IconModule)();\n  };\n  IconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IconModule\n  });\n  IconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return IconModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of @coreui/icons-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IconComponent, IconDirective, IconModule, IconSetModule, IconSetService };\n//# sourceMappingURL=coreui-icons-angular.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}